name: Create Template Repository
on:
  workflow_dispatch:
    inputs:
      repo-name:
        description: "새로운 레포지토리 이름"
        required: true
      repo-description:
        description: "레포지토리 설명"
        required: false
        default: ""
      private:
        description: "비공개 여부"
        required: true
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

jobs:
  create-and-setup-repo:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout template files
        uses: actions/checkout@v4

      - name: Create Repository
        uses: actions/github-script@v7
        id: create-repo
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const response = await github.rest.repos.createForAuthenticatedUser({
              name: "${{ github.event.inputs.repo-name }}",
              description: "${{ github.event.inputs.repo-description }}",
              private: ${{ github.event.inputs.private }},
              auto_init: false
            });
            console.log(`Repository created: ${response.data.html_url}`);
            return response.data.full_name;

      - name: Push template files
        run: |
          REPO_NAME="${{ steps.create-repo.outputs.result }}"
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # 현재 디렉토리의 .git 폴더 제거
          rm -rf .git

          # 새로운 git 저장소 초기화
          git init

          # 모든 파일 추가
          git add .
          git commit -m "Initial commit with template files"

          # 새 레포지토리에 푸시
          git remote add origin "https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${REPO_NAME}.git"
          git branch -M main
          git push -u origin main

      - name: Setup branch protection
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const [owner, repo] = '${{ steps.create-repo.outputs.result }}'.split('/');
            try {
              // 잠시 대기하여 레포지토리와 브랜치가 생성될 때까지 기다림
              await new Promise(resolve => setTimeout(resolve, 5000));
              
              await github.rest.repos.updateBranchProtection({
                owner: owner,
                repo: repo.replace(/['"]/g, ''), // 따옴표 제거
                branch: 'main',
                required_status_checks: null,
                enforce_admins: true,
                restrictions: null,
                required_pull_request_reviews: {
                  required_approving_review_count: 1
                }
              });
            } catch (error) {
              console.log('Error setting branch protection:', error);
              // 브랜치 보호 설정 실패해도 전체 워크플로우는 계속 진행
            }
